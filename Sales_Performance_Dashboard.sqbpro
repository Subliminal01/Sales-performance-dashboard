<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Sales_Performance_Dashboard.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1431"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Sales Performance Dashboard - Customer details" custom_title="0" dock_id="1" table="4,46:mainSales Performance Dashboard - Customer details"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011300ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">--checking both tables
select * from &quot;Sales Performance Dashboard - Sales&quot; sales;
select * from &quot;Sales Performance Dashboard - Customer details&quot; customers;

--joining the tables
select * from &quot;Sales Performance Dashboard - Sales&quot; sales
inner join &quot;Sales Performance Dashboard - customer details&quot; customers
on sales.&quot;Customer ID&quot;=customers.&quot;customer id&quot;
order by sales.&quot;customer id&quot;;

--using CTEs
with total_database as (
select * from &quot;Sales Performance Dashboard - Sales&quot; sales
inner join &quot;Sales Performance Dashboard - customer details&quot; customers
on sales.&quot;Customer ID&quot;=customers.&quot;customer id&quot;
)
select * from total_database;

--aggregate functions:
--direct aggregate function
select product, sum(quantity) as sales_of_products from &quot;Sales Performance Dashboard - Sales&quot; sales
group by product order by sales_of_products DESC;

--revenue based on products
--using CTE
with max_revenue_by_product as (select product, sum(revenue) as revenue_of_product from &quot;Sales Performance Dashboard - Sales&quot; sales
group by Product)
select * from max_revenue_by_product order by Revenue_of_product DESC;

--loyal customers (customers with the most orders)
with max_orders_by_customers as (select &quot;customer name&quot;, email, count(&quot;order id&quot;) as number_of_orders from &quot;Sales Performance Dashboard - Sales&quot; sales
inner join &quot;Sales Performance Dashboard - customer details&quot; customers
on sales.&quot;Customer ID&quot;=customers.&quot;customer id&quot;
group by &quot;customer name&quot;, Email)
select * from max_orders_by_customers order by number_of_orders DESC
LIMIT 10;

--average sales from each Region&gt;3
select avg(quantity) as average_sales, Region from &quot;Sales Performance Dashboard - sales&quot; sales
group by Region
having average_sales&gt;3
order by average_sales DESC;

--regions with average sales greater than average sales of all regions combined (uses subquery and CTE both)
with intermediate_table as (select region, avg(Quantity) averaged_sales from &quot;Sales Performance Dashboard - sales&quot; sales
group by Region)
select region, averaged_sales from intermediate_table WHERE averaged_sales &gt;
(
select avg(quantity) from &quot;Sales Performance Dashboard - sales&quot; sales
);

--window function
select *, 
row_number() over(partition by &quot;Customer ID&quot;)
from &quot;Sales Performance Dashboard - Sales&quot; sales;

--revenue generated by each Customer
select *, 
sum(Revenue) over(partition by &quot;Customer ID&quot; order by date)
from &quot;Sales Performance Dashboard - Sales&quot; sales;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
